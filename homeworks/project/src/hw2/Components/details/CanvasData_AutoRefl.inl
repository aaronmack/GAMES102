// This file is generated by Ubpa::USRefl::AutoRefl

#pragma once

#include <USRefl/USRefl.h>

template<>
struct Ubpa::USRefl::TypeInfo<LossFunction> :
    TypeInfoBase<LossFunction>
{
#ifdef UBPA_USREFL_NOT_USE_NAMEOF
    static constexpr char name[13] = "LossFunction";
#endif
    static constexpr AttrList attrs = {};
    static constexpr FieldList fields = {
        Field {TSTR("MeanSquaredError"), Type::MeanSquaredError},
        Field {TSTR("CrossEntropy"), Type::CrossEntropy},
    };
};

template<>
struct Ubpa::USRefl::TypeInfo<CanvasData> :
    TypeInfoBase<CanvasData>
{
#ifdef UBPA_USREFL_NOT_USE_NAMEOF
    static constexpr char name[11] = "CanvasData";
#endif
    static constexpr AttrList attrs = {};
    static constexpr FieldList fields = {
        Field {TSTR("input_points"), &Type::input_points},
        Field {TSTR("point_set"), &Type::point_set},
        Field {TSTR("scrolling"), &Type::scrolling, AttrList {
            Attr {TSTR(UMeta::initializer), []()->Ubpa::valf2{ return { 0.f,0.f }; }},
        }},
        Field {TSTR("opt_enable_grid"), &Type::opt_enable_grid, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { true }; }},
        }},
        Field {TSTR("opt_enable_context_menu"), &Type::opt_enable_context_menu, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { true }; }},
        }},
        Field {TSTR("opt_fitting_step"), &Type::opt_fitting_step, AttrList {
            Attr {TSTR(UMeta::initializer), []()->int{ return { 5 }; }},
        }},
        Field {TSTR("opt_is_training"), &Type::opt_is_training, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("opt_hidden_node_count"), &Type::opt_hidden_node_count, AttrList {
            Attr {TSTR(UMeta::initializer), []()->int{ return { 10 }; }},
        }},
        Field {TSTR("opt_learning_rate"), &Type::opt_learning_rate, AttrList {
            Attr {TSTR(UMeta::initializer), []()->float{ return { 0.001f }; }},
        }},
        Field {TSTR("opt_loss_function"), &Type::opt_loss_function, AttrList {
            Attr {TSTR(UMeta::initializer), []()->int{ return { LossFunction::MeanSquaredError }; }},
        }},
        Field {TSTR("ONES"), &Type::ONES},
        Field {TSTR("X"), &Type::X},
        Field {TSTR("Y"), &Type::Y},
        Field {TSTR("W"), &Type::W},
        Field {TSTR("b"), &Type::b},
        Field {TSTR("W2"), &Type::W2},
        Field {TSTR("b2"), &Type::b2, AttrList {
            Attr {TSTR(UMeta::initializer), []()->float{ return { 0.f }; }},
        }},
        Field {TSTR("dW"), &Type::dW},
        Field {TSTR("db"), &Type::db},
        Field {TSTR("dW2"), &Type::dW2},
        Field {TSTR("db2"), &Type::db2, AttrList {
            Attr {TSTR(UMeta::initializer), []()->float{ return { 0.f }; }},
        }},
        Field {TSTR("Z"), &Type::Z},
        Field {TSTR("A"), &Type::A},
        Field {TSTR("Y_predict"), &Type::Y_predict},
        Field {TSTR("cost"), &Type::cost, AttrList {
            Attr {TSTR(UMeta::initializer), []()->float{ return { 0.f }; }},
        }},
        Field {TSTR("iteration"), &Type::iteration, AttrList {
            Attr {TSTR(UMeta::initializer), []()->size_t{ return { 0 }; }},
        }},
        Field {TSTR("current_count"), &Type::current_count, AttrList {
            Attr {TSTR(UMeta::initializer), []()->size_t{ return { 0u }; }},
        }},
    };
};

