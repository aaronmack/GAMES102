// This file is generated by Ubpa::USRefl::AutoRefl

#pragma once

#include <USRefl/USRefl.h>

template<>
struct Ubpa::USRefl::TypeInfo<CanvasData> :
    TypeInfoBase<CanvasData>
{
#ifdef UBPA_USREFL_NOT_USE_NAMEOF
    static constexpr char name[11] = "CanvasData";
#endif
    static constexpr AttrList attrs = {};
    static constexpr FieldList fields = {
        Field {TSTR("scrolling"), &Type::scrolling, AttrList {
            Attr {TSTR(UMeta::initializer), []()->Ubpa::valf2{ return { 0.f,0.f }; }},
        }},
        Field {TSTR("opt_enable_grid"), &Type::opt_enable_grid, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { true }; }},
        }},
        Field {TSTR("opt_enable_context_menu"), &Type::opt_enable_context_menu, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { true }; }},
        }},
        Field {TSTR("adding_line"), &Type::adding_line, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("show_sampling_points"), &Type::show_sampling_points, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { true }; }},
        }},
        Field {TSTR("show_boundary"), &Type::show_boundary, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { true }; }},
        }},
        Field {TSTR("run_single"), &Type::run_single, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("run_auto"), &Type::run_auto, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("reset"), &Type::reset, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("width"), &Type::width, AttrList {
            Attr {TSTR(UMeta::initializer), []()->int{ return { 540 }; }},
        }},
        Field {TSTR("height"), &Type::height, AttrList {
            Attr {TSTR(UMeta::initializer), []()->int{ return { 340 }; }},
        }},
        Field {TSTR("rectangle"), &Type::rectangle},
        Field {TSTR("sampling_points"), &Type::sampling_points},
        Field {TSTR("sampling_points_origin"), &Type::sampling_points_origin},
        Field {TSTR("num_sampling_points"), &Type::num_sampling_points, AttrList {
            Attr {TSTR(UMeta::initializer), []()->int{ return { 10 }; }},
        }},
        Field {TSTR("btn_random_sampling"), &Type::btn_random_sampling, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("draw_delaunay"), &Type::draw_delaunay, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("draw_voronoi"), &Type::draw_voronoi, AttrList {
            Attr {TSTR(UMeta::initializer), []()->bool{ return { false }; }},
        }},
        Field {TSTR("num_lloyd_iterations"), &Type::num_lloyd_iterations, AttrList {
            Attr {TSTR(UMeta::initializer), []()->int{ return { 0 }; }},
        }},
    };
};

